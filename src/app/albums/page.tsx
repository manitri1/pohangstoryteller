'use client';

import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Plus,
  Search,
  Grid3X3,
  List,
  BookOpen,
  Eye,
  Calendar,
  Tag,
  Image as ImageIcon,
  Video,
  FileText,
} from 'lucide-react';
import { CreateAlbumModal } from '@/components/albums/create-album-modal';
import { AlbumCard } from '@/components/albums/album-card';
import { toast } from '@/hooks/use-toast';

interface Album {
  id: string;
  title: string;
  description?: string;
  coverImage?: string;
  itemCount: number;
  viewCount: number;
  isAutoGenerated: boolean;
  tags: string[];
  createdAt: Date;
  updatedAt: Date;
  items: AlbumItem[];
}

interface AlbumItem {
  id: string;
  type: 'image' | 'video' | 'stamp' | 'story';
  title: string;
  content?: string;
  imageUrl?: string;
  videoUrl?: string;
  location?: string;
  createdAt: Date;
}

interface AlbumStats {
  totalAlbums: number;
  totalItems: number;
  autoGenerated: number;
  totalViews: number;
}

export default function AlbumsPage() {
  const [albums, setAlbums] = useState<Album[]>([]);
  const [filteredAlbums, setFilteredAlbums] = useState<Album[]>([]);
  const [stats, setStats] = useState<AlbumStats>({
    totalAlbums: 0,
    totalItems: 0,
    autoGenerated: 0,
    totalViews: 0,
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('latest');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [isLoading, setIsLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);

  // 앨범 데이터 로드
  const loadAlbums = useCallback(async () => {
    try {
      setIsLoading(true);
      // 실제 API 호출 대신 목업 데이터 사용
      const mockAlbums: Album[] = [
        {
          id: '1',
          title: '포항 바다 여행',
          description: '영일대 해수욕장에서의 아름다운 추억들',
          coverImage: 'https://picsum.photos/400/300?random=1',
          itemCount: 15,
          viewCount: 42,
          isAutoGenerated: false,
          tags: ['바다', '여행', '포항'],
          createdAt: new Date('2024-12-15T10:00:00Z'),
          updatedAt: new Date('2024-12-19T15:30:00Z'),
          items: [],
        },
        {
          id: '2',
          title: '포항 맛집 탐방',
          description: '포항의 대표 맛집들을 돌아다니며 맛본 음식들',
          coverImage: 'https://picsum.photos/400/300?random=2',
          itemCount: 8,
          viewCount: 28,
          isAutoGenerated: true,
          tags: ['맛집', '음식', '포항'],
          createdAt: new Date('2024-12-10T14:00:00Z'),
          updatedAt: new Date('2024-12-18T09:15:00Z'),
          items: [],
        },
        {
          id: '3',
          title: '포항 역사 탐방',
          description: '포항의 역사적 장소들을 둘러본 기록',
          coverImage: 'https://picsum.photos/400/300?random=3',
          itemCount: 12,
          viewCount: 35,
          isAutoGenerated: false,
          tags: ['역사', '문화', '교육'],
          createdAt: new Date('2024-12-05T16:00:00Z'),
          updatedAt: new Date('2024-12-17T11:45:00Z'),
          items: [],
        },
      ];

      setAlbums(mockAlbums);
      updateStats(mockAlbums);
    } catch (error) {
      console.error('앨범 데이터 로드 실패:', error);
      toast({
        title: '오류',
        description: '앨범 데이터를 불러오는데 실패했습니다.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  }, []);

  // 앨범 데이터 로드
  useEffect(() => {
    loadAlbums();
  }, [loadAlbums]);

  // 필터링 및 정렬
  useEffect(() => {
    let filtered = [...albums];

    // 검색 필터
    if (searchTerm) {
      filtered = filtered.filter(
        (album) =>
          album.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          album.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          album.tags.some((tag) =>
            tag.toLowerCase().includes(searchTerm.toLowerCase())
          )
      );
    }

    // 카테고리 필터
    if (categoryFilter !== 'all') {
      if (categoryFilter === 'auto') {
        filtered = filtered.filter((album) => album.isAutoGenerated);
      } else if (categoryFilter === 'manual') {
        filtered = filtered.filter((album) => !album.isAutoGenerated);
      }
    }

    // 정렬
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'latest':
          return (
            new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
          );
        case 'oldest':
          return (
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
          );
        case 'name':
          return a.title.localeCompare(b.title);
        case 'views':
          return b.viewCount - a.viewCount;
        case 'items':
          return b.itemCount - a.itemCount;
        default:
          return 0;
      }
    });

    setFilteredAlbums(filtered);
  }, [albums, searchTerm, categoryFilter, sortBy]);

  // 통계 업데이트
  const updateStats = (albums: Album[]) => {
    const stats: AlbumStats = {
      totalAlbums: albums.length,
      totalItems: albums.reduce((sum, album) => sum + album.itemCount, 0),
      autoGenerated: albums.filter((album) => album.isAutoGenerated).length,
      totalViews: albums.reduce((sum, album) => sum + album.viewCount, 0),
    };
    setStats(stats);
  };

  // 새 앨범 생성
  const handleCreateAlbum = async (albumData: {
    title: string;
    description?: string;
    tags: string[];
  }) => {
    try {
      const newAlbum: Album = {
        id: `album-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        title: albumData.title,
        description: albumData.description,
        coverImage: `https://picsum.photos/400/300?random=${Date.now()}`,
        itemCount: 0,
        viewCount: 0,
        isAutoGenerated: false,
        tags: albumData.tags,
        createdAt: new Date(),
        updatedAt: new Date(),
        items: [],
      };

      setAlbums((prev) => [newAlbum, ...prev]);
      setShowCreateModal(false);

      toast({
        title: '앨범 생성 완료',
        description: '새 앨범이 성공적으로 생성되었습니다.',
      });
    } catch (error) {
      console.error('앨범 생성 실패:', error);
      toast({
        title: '앨범 생성 실패',
        description: '앨범 생성 중 오류가 발생했습니다.',
        variant: 'destructive',
      });
    }
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* 헤더 */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">나의 앨범</h1>
            <p className="text-gray-600 mt-1">
              포항 여행의 소중한 순간들을 기록한 앨범들
            </p>
          </div>
          <Button
            onClick={() => setShowCreateModal(true)}
            className="flex items-center gap-2"
          >
            <Plus className="h-4 w-4" />새 앨범
          </Button>
        </div>

        {/* 통계 카드 */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">
                {stats.totalAlbums}
              </div>
              <div className="text-sm text-gray-600">총 앨범</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">
                {stats.totalItems}
              </div>
              <div className="text-sm text-gray-600">총 아이템</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-purple-600">
                {stats.autoGenerated}
              </div>
              <div className="text-sm text-gray-600">자동 생성</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-red-600">
                {stats.totalViews}
              </div>
              <div className="text-sm text-gray-600">총 조회수</div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* 검색 및 필터 */}
      <div className="mb-6 space-y-4">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="앨범 검색..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
          </div>
          <Select value={categoryFilter} onValueChange={setCategoryFilter}>
            <SelectTrigger className="w-full md:w-48">
              <SelectValue placeholder="카테고리" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">전체</SelectItem>
              <SelectItem value="manual">수동 생성</SelectItem>
              <SelectItem value="auto">자동 생성</SelectItem>
            </SelectContent>
          </Select>
          <Select value={sortBy} onValueChange={setSortBy}>
            <SelectTrigger className="w-full md:w-48">
              <SelectValue placeholder="정렬 기준" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="latest">최신순</SelectItem>
              <SelectItem value="oldest">오래된순</SelectItem>
              <SelectItem value="name">이름순</SelectItem>
              <SelectItem value="views">조회수순</SelectItem>
              <SelectItem value="items">아이템순</SelectItem>
            </SelectContent>
          </Select>
          <div className="flex gap-2">
            <Button
              variant={viewMode === 'grid' ? 'default' : 'outline'}
              size="sm"
              onClick={() => setViewMode('grid')}
            >
              <Grid3X3 className="h-4 w-4" />
            </Button>
            <Button
              variant={viewMode === 'list' ? 'default' : 'outline'}
              size="sm"
              onClick={() => setViewMode('list')}
            >
              <List className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* 앨범 목록 */}
      {filteredAlbums.length === 0 ? (
        <Card className="text-center py-12">
          <CardContent>
            <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              아직 생성된 앨범이 없습니다
            </h3>
            <p className="text-gray-600 mb-4">
              스탬프를 수집하거나 직접 앨범을 만들어보세요!
            </p>
            <Button onClick={() => setShowCreateModal(true)}>
              <Plus className="h-4 w-4 mr-2" />첫 앨범 만들기
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div
          className={
            viewMode === 'grid'
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
              : 'space-y-4'
          }
        >
          {filteredAlbums.map((album) => (
            <AlbumCard key={album.id} album={album} viewMode={viewMode} />
          ))}
        </div>
      )}

      {/* 앨범 생성 모달 */}
      <CreateAlbumModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onCreateAlbum={handleCreateAlbum}
      />
    </div>
  );
}
