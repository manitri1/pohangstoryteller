'use client';

import { useState, useEffect, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  ArrowLeft,
  Share,
  Download,
  Edit,
  Trash2,
  Eye,
  Calendar,
  Tag,
  Image as ImageIcon,
  Video,
  FileText,
  MapPin,
  Heart,
  MessageCircle,
  MoreHorizontal,
} from 'lucide-react';
import { AlbumItemCard } from '@/components/albums/album-item-card';
import { AddItemModal } from '@/components/albums/add-item-modal';
import { toast } from '@/hooks/use-toast';
import Link from 'next/link';
import Image from 'next/image';

interface Album {
  id: string;
  title: string;
  description?: string;
  coverImage?: string;
  itemCount: number;
  viewCount: number;
  isAutoGenerated: boolean;
  tags: string[];
  createdAt: Date;
  updatedAt: Date;
  items: AlbumItem[];
}

interface AlbumItem {
  id: string;
  type: 'image' | 'video' | 'stamp' | 'story';
  title: string;
  content?: string;
  imageUrl?: string;
  videoUrl?: string;
  location?: string;
  createdAt: Date;
  likes?: number;
  comments?: number;
}

export default function AlbumDetailPage() {
  const params = useParams();
  const router = useRouter();
  const albumId = params.id as string;

  const [album, setAlbum] = useState<Album | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  // 앨범 데이터 로드
  const loadAlbum = useCallback(async () => {
    try {
      setIsLoading(true);
      // 실제 API 호출 대신 목업 데이터 사용
      const mockAlbum: Album = {
        id: albumId,
        title: '포항 바다 여행',
        description: '영일대 해수욕장에서의 아름다운 추억들',
        coverImage: 'https://picsum.photos/800/600?random=1',
        itemCount: 15,
        viewCount: 42,
        isAutoGenerated: false,
        tags: ['바다', '여행', '포항'],
        createdAt: new Date('2024-12-15T10:00:00Z'),
        updatedAt: new Date('2024-12-19T15:30:00Z'),
        items: [
          {
            id: '1',
            type: 'image',
            title: '영일대 해수욕장 일출',
            content: '새벽 5시에 일어나서 본 아름다운 일출',
            imageUrl: 'https://picsum.photos/600/400?random=1',
            location: '영일대 해수욕장',
            createdAt: new Date('2024-12-15T05:30:00Z'),
            likes: 12,
            comments: 3,
          },
          {
            id: '2',
            type: 'video',
            title: '포항 바다의 파도',
            content: '포항 바다의 거친 파도 소리',
            videoUrl:
              'https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4',
            location: '영일대 해수욕장',
            createdAt: new Date('2024-12-15T06:00:00Z'),
            likes: 8,
            comments: 2,
          },
          {
            id: '3',
            type: 'stamp',
            title: '영일대 해수욕장 스탬프',
            content: '포항 여행의 첫 번째 스탬프',
            imageUrl: 'https://picsum.photos/300/300?random=3',
            location: '영일대 해수욕장',
            createdAt: new Date('2024-12-15T07:00:00Z'),
            likes: 15,
            comments: 5,
          },
          {
            id: '4',
            type: 'story',
            title: '포항 바다 이야기',
            content: '포항 바다에서의 특별한 경험을 담은 이야기',
            location: '영일대 해수욕장',
            createdAt: new Date('2024-12-15T08:00:00Z'),
            likes: 20,
            comments: 7,
          },
        ],
      };

      setAlbum(mockAlbum);
    } catch (error) {
      console.error('앨범 데이터 로드 실패:', error);
      toast({
        title: '오류',
        description: '앨범 데이터를 불러오는데 실패했습니다.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  }, [albumId]);

  useEffect(() => {
    loadAlbum();
  }, [loadAlbum]);

  // 앨범 공유
  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: album?.title,
        text: album?.description,
        url: window.location.href,
      });
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: '링크 복사',
        description: '앨범 링크가 클립보드에 복사되었습니다.',
      });
    }
  };

  // 앨범 다운로드
  const handleDownload = () => {
    toast({
      title: '다운로드 준비 중',
      description: '앨범을 ZIP 파일로 다운로드합니다.',
    });
  };

  // 앨범 수정
  const handleEdit = () => {
    toast({
      title: '앨범 수정',
      description: '앨범 정보를 수정할 수 있습니다.',
    });
  };

  // 앨범 삭제
  const handleDelete = () => {
    if (confirm('정말로 이 앨범을 삭제하시겠습니까?')) {
      toast({
        title: '앨범 삭제',
        description: '앨범이 삭제되었습니다.',
        variant: 'destructive',
      });
      router.push('/albums');
    }
  };

  // 아이템 추가
  const handleAddItem = async (itemData: {
    type: 'image' | 'video' | 'stamp' | 'story';
    title: string;
    content?: string;
    location?: string;
  }) => {
    if (!album) return;

    const newItem: AlbumItem = {
      id: `item-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type: itemData.type,
      title: itemData.title,
      content: itemData.content,
      location: itemData.location,
      createdAt: new Date(),
      likes: 0,
      comments: 0,
      ...(itemData.type === 'image' && {
        imageUrl: `https://picsum.photos/600/400?random=${Date.now()}`,
      }),
      ...(itemData.type === 'video' && {
        videoUrl:
          'https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4',
      }),
    };

    setAlbum((prev) => {
      if (!prev) return prev;
      return {
        ...prev,
        items: [newItem, ...prev.items],
        itemCount: prev.itemCount + 1,
        updatedAt: new Date(),
      };
    });

    setShowAddModal(false);
    toast({
      title: '아이템 추가 완료',
      description: '새 아이템이 앨범에 추가되었습니다.',
    });
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      </div>
    );
  }

  if (!album) {
    return (
      <div className="container mx-auto px-4 py-8">
        <Card className="text-center py-12">
          <CardContent>
            <ImageIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              앨범을 찾을 수 없습니다
            </h3>
            <p className="text-gray-600 mb-4">
              요청하신 앨범이 존재하지 않거나 삭제되었습니다.
            </p>
            <Link href="/albums">
              <Button>
                <ArrowLeft className="h-4 w-4 mr-2" />
                앨범 목록으로 돌아가기
              </Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* 헤더 */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <Link href="/albums">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                뒤로가기
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                {album.title}
              </h1>
              {album.description && (
                <p className="text-gray-600 mt-1">{album.description}</p>
              )}
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={handleShare}>
              <Share className="h-4 w-4 mr-2" />
              공유
            </Button>
            <Button variant="outline" size="sm" onClick={handleDownload}>
              <Download className="h-4 w-4 mr-2" />
              다운로드
            </Button>
            <Button variant="outline" size="sm" onClick={handleEdit}>
              <Edit className="h-4 w-4 mr-2" />
              수정
            </Button>
            <Button variant="outline" size="sm" onClick={handleDelete}>
              <Trash2 className="h-4 w-4 mr-2" />
              삭제
            </Button>
          </div>
        </div>

        {/* 앨범 정보 */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          {/* 커버 이미지 */}
          <div className="lg:col-span-1">
            <div className="relative w-full h-64 lg:h-80 rounded-lg overflow-hidden">
              {album.coverImage ? (
                <Image
                  src={album.coverImage}
                  alt={album.title}
                  fill
                  className="object-cover"
                />
              ) : (
                <div className="w-full h-full bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
                  <ImageIcon className="h-16 w-16 text-gray-400" />
                </div>
              )}
            </div>
          </div>

          {/* 앨범 메타데이터 */}
          <div className="lg:col-span-2">
            <div className="space-y-4">
              {/* 태그 */}
              {album.tags.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {album.tags.map((tag, index) => (
                    <Badge key={index} variant="outline">
                      #{tag}
                    </Badge>
                  ))}
                </div>
              )}

              {/* 통계 */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    {album.itemCount}
                  </div>
                  <div className="text-sm text-gray-600">아이템</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    {album.viewCount}
                  </div>
                  <div className="text-sm text-gray-600">조회수</div>
                </div>
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">
                    {album.items.reduce(
                      (sum, item) => sum + (item.likes || 0),
                      0
                    )}
                  </div>
                  <div className="text-sm text-gray-600">좋아요</div>
                </div>
                <div className="text-center p-4 bg-orange-50 rounded-lg">
                  <div className="text-2xl font-bold text-orange-600">
                    {album.items.reduce(
                      (sum, item) => sum + (item.comments || 0),
                      0
                    )}
                  </div>
                  <div className="text-sm text-gray-600">댓글</div>
                </div>
              </div>

              {/* 생성 정보 */}
              <div className="flex items-center space-x-4 text-sm text-gray-500">
                <div className="flex items-center space-x-1">
                  <Calendar className="h-4 w-4" />
                  <span>
                    생성:{' '}
                    {new Intl.DateTimeFormat('ko-KR').format(album.createdAt)}
                  </span>
                </div>
                <div className="flex items-center space-x-1">
                  <Calendar className="h-4 w-4" />
                  <span>
                    수정:{' '}
                    {new Intl.DateTimeFormat('ko-KR').format(album.updatedAt)}
                  </span>
                </div>
                {album.isAutoGenerated && (
                  <Badge variant="secondary">자동 생성</Badge>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* 아이템 목록 헤더 */}
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-semibold text-gray-900">
          앨범 아이템 ({album.items.length}개)
        </h2>
        <div className="flex items-center space-x-2">
          <Button
            variant={viewMode === 'grid' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewMode('grid')}
          >
            <ImageIcon className="h-4 w-4" />
          </Button>
          <Button
            variant={viewMode === 'list' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setViewMode('list')}
          >
            <FileText className="h-4 w-4" />
          </Button>
          <Button onClick={() => setShowAddModal(true)}>
            <ImageIcon className="h-4 w-4 mr-2" />
            아이템 추가
          </Button>
        </div>
      </div>

      {/* 아이템 목록 */}
      {album.items.length === 0 ? (
        <Card className="text-center py-12">
          <CardContent>
            <ImageIcon className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              아직 아이템이 없습니다
            </h3>
            <p className="text-gray-600 mb-4">첫 번째 아이템을 추가해보세요!</p>
            <Button onClick={() => setShowAddModal(true)}>
              <ImageIcon className="h-4 w-4 mr-2" />첫 아이템 추가
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div
          className={
            viewMode === 'grid'
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
              : 'space-y-4'
          }
        >
          {album.items.map((item) => (
            <AlbumItemCard key={item.id} item={item} viewMode={viewMode} />
          ))}
        </div>
      )}

      {/* 아이템 추가 모달 */}
      <AddItemModal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        onAddItem={handleAddItem}
      />
    </div>
  );
}
