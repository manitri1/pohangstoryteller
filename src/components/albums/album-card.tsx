'use client';

import { useState } from 'react';
import {
  Eye,
  Calendar,
  Tag,
  Image as ImageIcon,
  Video,
  FileText,
  MapPin,
  Lock,
  Users,
} from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
import Link from 'next/link';

interface Album {
  id: string;
  title: string;
  description?: string;
  coverImage?: string;
  itemCount: number;
  viewCount: number;
  isAutoGenerated: boolean;
  tags: string[];
  startDate?: string;
  endDate?: string;
  visibility: 'private' | 'friends' | 'public';
  createdAt: Date;
  updatedAt: Date;
}

interface AlbumCardProps {
  album: Album;
  viewMode: 'grid' | 'list';
}

export function AlbumCard({ album, viewMode }: AlbumCardProps) {
  const [imageError, setImageError] = useState(false);

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('ko-KR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    }).format(date);
  };

  const getVisibilityIcon = (visibility: 'private' | 'friends' | 'public') => {
    switch (visibility) {
      case 'private':
        return <Lock className="h-4 w-4" />;
      case 'friends':
        return <Users className="h-4 w-4" />;
      case 'public':
        return <Eye className="h-4 w-4" />;
      default:
        return <Lock className="h-4 w-4" />;
    }
  };

  const getVisibilityText = (visibility: 'private' | 'friends' | 'public') => {
    switch (visibility) {
      case 'private':
        return '비공개';
      case 'friends':
        return '친구만';
      case 'public':
        return '전체공개';
      default:
        return '비공개';
    }
  };

  if (viewMode === 'list') {
    return (
      <Card className="w-full hover:shadow-md transition-shadow">
        <CardContent className="p-4">
          <div className="flex items-center space-x-4">
            {/* 썸네일 */}
            <div className="relative w-16 h-16 rounded-lg overflow-hidden flex-shrink-0">
              {album.coverImage && !imageError ? (
                <Image
                  src={album.coverImage}
                  alt={album.title}
                  fill
                  className="object-cover"
                  onError={() => setImageError(true)}
                />
              ) : (
                <div className="w-full h-full bg-gray-200 flex items-center justify-center">
                  <ImageIcon className="h-6 w-6 text-gray-400" />
                </div>
              )}
            </div>

            {/* 앨범 정보 */}
            <div className="flex-1 min-w-0">
              <div className="flex items-center space-x-2 mb-1">
                <h3 className="font-semibold text-lg truncate">
                  {album.title}
                </h3>
                {album.isAutoGenerated && (
                  <Badge variant="secondary" className="text-xs">
                    자동 생성
                  </Badge>
                )}
              </div>

              {album.description && (
                <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                  {album.description}
                </p>
              )}

              {/* 태그 */}
              {album.tags.length > 0 && (
                <div className="flex flex-wrap gap-1 mb-2">
                  {album.tags.slice(0, 3).map((tag, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      #{tag}
                    </Badge>
                  ))}
                  {album.tags.length > 3 && (
                    <Badge variant="outline" className="text-xs">
                      +{album.tags.length - 3}
                    </Badge>
                  )}
                </div>
              )}

              {/* 여행 날짜 */}
              {album.startDate && album.endDate && (
                <div className="flex items-center space-x-1 text-sm text-blue-600 mb-2">
                  <Calendar className="h-4 w-4" />
                  <span>
                    {new Date(album.startDate).toLocaleDateString('ko-KR')} -{' '}
                    {new Date(album.endDate).toLocaleDateString('ko-KR')}
                  </span>
                </div>
              )}

              {/* 통계 */}
              <div className="flex items-center space-x-4 text-sm text-gray-500">
                <div className="flex items-center space-x-1">
                  <ImageIcon className="h-4 w-4" />
                  <span>{album.itemCount}개</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Eye className="h-4 w-4" />
                  <span>{album.viewCount}</span>
                </div>
                <div className="flex items-center space-x-1">
                  {getVisibilityIcon(album.visibility)}
                  <span>{getVisibilityText(album.visibility)}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Calendar className="h-4 w-4" />
                  <span>{formatDate(album.updatedAt)}</span>
                </div>
              </div>
            </div>

            {/* 액션 버튼 */}
            <div className="flex-shrink-0">
              <Link href={`/albums/${album.id}`}>
                <Button variant="outline" size="sm">
                  보기
                </Button>
              </Link>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full hover:shadow-lg transition-all duration-200 group">
      <div className="relative">
        {/* 커버 이미지 */}
        <div className="relative w-full h-48 rounded-t-lg overflow-hidden">
          {album.coverImage && !imageError ? (
            <Image
              src={album.coverImage}
              alt={album.title}
              fill
              className="object-cover group-hover:scale-105 transition-transform duration-300"
              onError={() => setImageError(true)}
            />
          ) : (
            <div className="w-full h-full bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
              <ImageIcon className="h-12 w-12 text-gray-400" />
            </div>
          )}

          {/* 오버레이 */}
          <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300" />

          {/* 자동 생성 배지 */}
          {album.isAutoGenerated && (
            <div className="absolute top-3 left-3">
              <Badge variant="secondary" className="bg-white/90 text-gray-700">
                자동 생성
              </Badge>
            </div>
          )}

          {/* 공개 설정 */}
          <div className="absolute top-3 right-3 flex items-center space-x-1 bg-black/50 text-white rounded-full px-2 py-1 text-sm">
            {getVisibilityIcon(album.visibility)}
            <span>{getVisibilityText(album.visibility)}</span>
          </div>

          {/* 조회수 */}
          <div className="absolute bottom-3 right-3">
            <div className="flex items-center space-x-1 bg-black/50 text-white rounded-full px-2 py-1 text-sm">
              <Eye className="h-3 w-3" />
              <span>{album.viewCount}</span>
            </div>
          </div>
        </div>

        <CardContent className="p-4">
          {/* 제목 */}
          <h3 className="font-semibold text-lg mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors">
            {album.title}
          </h3>

          {/* 설명 */}
          {album.description && (
            <p className="text-sm text-gray-600 mb-3 line-clamp-2">
              {album.description}
            </p>
          )}

          {/* 여행 날짜 */}
          {album.startDate && album.endDate && (
            <div className="flex items-center space-x-1 text-sm text-blue-600 mb-3">
              <Calendar className="h-4 w-4" />
              <span>
                {new Date(album.startDate).toLocaleDateString('ko-KR')} -{' '}
                {new Date(album.endDate).toLocaleDateString('ko-KR')}
              </span>
            </div>
          )}

          {/* 태그 */}
          {album.tags.length > 0 && (
            <div className="flex flex-wrap gap-1 mb-3">
              {album.tags.slice(0, 2).map((tag, index) => (
                <Badge key={index} variant="outline" className="text-xs">
                  #{tag}
                </Badge>
              ))}
              {album.tags.length > 2 && (
                <Badge variant="outline" className="text-xs">
                  +{album.tags.length - 2}
                </Badge>
              )}
            </div>
          )}

          {/* 통계 */}
          <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
            <div className="flex items-center space-x-1">
              <ImageIcon className="h-4 w-4" />
              <span>{album.itemCount}개 아이템</span>
            </div>
            <div className="flex items-center space-x-1">
              <Calendar className="h-4 w-4" />
              <span>{formatDate(album.updatedAt)}</span>
            </div>
          </div>

          {/* 액션 버튼 */}
          <Link href={`/albums/${album.id}`} className="block">
            <Button className="w-full" variant="outline">
              앨범 보기
            </Button>
          </Link>
        </CardContent>
      </div>
    </Card>
  );
}
