'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  Calendar,
  MapPin,
  Users,
  Eye,
  Heart,
  Share2,
  MoreHorizontal,
  Image as ImageIcon,
  Video,
  FileText,
  Star,
} from 'lucide-react';
import Image from 'next/image';
import { motion } from 'framer-motion';

interface Album {
  id: string;
  title: string;
  description: string;
  coverImageUrl?: string;
  theme: 'nature' | 'history' | 'food' | 'culture' | 'general';
  isPublic: boolean;
  isAutoGenerated: boolean;
  itemCount: number;
  viewCount: number;
  likeCount: number;
  createdAt: Date;
  updatedAt: Date;
  items: AlbumItem[];
}

interface AlbumItem {
  id: string;
  type: 'stamp' | 'photo' | 'video' | 'text';
  title: string;
  contentUrl: string;
  thumbnailUrl?: string;
  metadata: any;
}

interface AlbumCardProps {
  album: Album;
  onView?: (album: Album) => void;
  onEdit?: (album: Album) => void;
  onShare?: (album: Album) => void;
  onLike?: (album: Album) => void;
  showActions?: boolean;
}

export default function AlbumCard({
  album,
  onView,
  onEdit,
  onShare,
  onLike,
  showActions = true,
}: AlbumCardProps) {
  const [isHovered, setIsHovered] = useState(false);
  const [isLiked, setIsLiked] = useState(false);

  const getThemeColor = (theme: string) => {
    switch (theme) {
      case 'nature':
        return 'bg-green-100 text-green-800';
      case 'history':
        return 'bg-purple-100 text-purple-800';
      case 'food':
        return 'bg-orange-100 text-orange-800';
      case 'culture':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getThemeIcon = (theme: string) => {
    switch (theme) {
      case 'nature':
        return 'üåø';
      case 'history':
        return 'üèõÔ∏è';
      case 'food':
        return 'üçΩÔ∏è';
      case 'culture':
        return 'üé≠';
      default:
        return 'üìñ';
    }
  };

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('ko-KR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }).format(date);
  };

  const getItemTypeIcon = (type: string) => {
    switch (type) {
      case 'stamp':
        return 'üè∑Ô∏è';
      case 'photo':
        return 'üì∑';
      case 'video':
        return 'üé•';
      case 'text':
        return 'üìù';
      default:
        return 'üìÑ';
    }
  };

  const handleLike = () => {
    setIsLiked(!isLiked);
    onLike?.(album);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{ y: -4 }}
      transition={{ duration: 0.2 }}
    >
      <Card
        className={`relative overflow-hidden transition-all duration-300 hover:shadow-xl ${
          isHovered ? 'scale-105' : 'scale-100'
        }`}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {/* Ïª§Î≤Ñ Ïù¥ÎØ∏ÏßÄ */}
        <div className="relative h-48 overflow-hidden">
          {album.coverImageUrl ? (
            <Image
              src={album.coverImageUrl}
              alt={album.title}
              fill
              className="object-cover transition-transform duration-300 hover:scale-110"
            />
          ) : (
            <div className="w-full h-full bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
              <div className="text-6xl opacity-50">
                {getThemeIcon(album.theme)}
              </div>
            </div>
          )}

          {/* Ïò§Î≤ÑÎ†àÏù¥ */}
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />

          {/* ÌÖåÎßà Î∞∞ÏßÄ */}
          <div className="absolute top-3 left-3">
            <Badge className={getThemeColor(album.theme)}>
              {getThemeIcon(album.theme)} {album.theme.toUpperCase()}
            </Badge>
          </div>

          {/* ÏûêÎèô ÏÉùÏÑ± Î∞∞ÏßÄ */}
          {album.isAutoGenerated && (
            <div className="absolute top-3 right-3">
              <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                <Star className="h-3 w-3 mr-1" />
                ÏûêÎèô ÏÉùÏÑ±
              </Badge>
            </div>
          )}

          {/* Í≥µÍ∞ú/ÎπÑÍ≥µÍ∞ú Î∞∞ÏßÄ */}
          <div className="absolute bottom-3 right-3">
            <Badge variant={album.isPublic ? 'default' : 'outline'}>
              {album.isPublic ? 'Í≥µÍ∞ú' : 'ÎπÑÍ≥µÍ∞ú'}
            </Badge>
          </div>
        </div>

        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-semibold text-gray-900 line-clamp-2">
            {album.title}
          </CardTitle>
          <p className="text-sm text-gray-600 line-clamp-2">
            {album.description}
          </p>
        </CardHeader>

        <CardContent className="space-y-3">
          {/* ÌÜµÍ≥Ñ Ï†ïÎ≥¥ */}
          <div className="flex items-center justify-between text-sm text-gray-500">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-1">
                <ImageIcon className="h-4 w-4" />
                <span>{album.itemCount}Í∞ú</span>
              </div>
              <div className="flex items-center gap-1">
                <Eye className="h-4 w-4" />
                <span>{album.viewCount}</span>
              </div>
              <div className="flex items-center gap-1">
                <Heart className="h-4 w-4" />
                <span>{album.likeCount}</span>
              </div>
            </div>
            <div className="flex items-center gap-1">
              <Calendar className="h-4 w-4" />
              <span>{formatDate(album.createdAt)}</span>
            </div>
          </div>

          {/* ÏïÑÏù¥ÌÖú ÌÉÄÏûÖ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
          {album.items && album.items.length > 0 && (
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <span>Ìè¨Ìï®Îêú ÏΩòÌÖêÏ∏†:</span>
              <div className="flex items-center gap-1">
                {album.items.slice(0, 3).map((item, index) => (
                  <span key={index} className="text-lg">
                    {getItemTypeIcon(item.type)}
                  </span>
                ))}
                {album.items.length > 3 && (
                  <span className="text-xs">+{album.items.length - 3}</span>
                )}
              </div>
            </div>
          )}

          {/* Ïï°ÏÖò Î≤ÑÌäº */}
          {showActions && (
            <div className="flex gap-2 pt-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => onView?.(album)}
                className="flex-1"
              >
                <Eye className="h-4 w-4 mr-2" />
                Î≥¥Í∏∞
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={handleLike}
                className={`${isLiked ? 'text-red-500' : ''}`}
              >
                <Heart className={`h-4 w-4 ${isLiked ? 'fill-current' : ''}`} />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onShare?.(album)}
              >
                <Share2 className="h-4 w-4" />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onEdit?.(album)}
              >
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </div>
          )}
        </CardContent>

        {/* Ìò∏Î≤Ñ Ìö®Í≥º */}
        {isHovered && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-lg flex items-end justify-center pb-4"
          >
            <div className="text-white text-sm font-medium bg-black/50 px-3 py-1 rounded-full">
              Ïï®Î≤î Î≥¥Í∏∞
            </div>
          </motion.div>
        )}
      </Card>
    </motion.div>
  );
}
